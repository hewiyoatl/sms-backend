# This is the main configuration file for the application.
# ~~~~~

### anatomy of the play layout
## https://www.playframework.com/documentation/2.5.x/Anatomy

### swagger documentation

nexmo {
  key = "cc0d5210"
  secret = "HSQvLGGePZ4THoud"
}

api.version = alfa
swagger.filter = ""
swagger.api.info = {
  contact: "hewi / mauricio",
  description: "doc document service",
  title: "doc-document-backend",
  termsOfService: "Terms Of Service",
  license: "Terms Of Service",
  licenseUrl: "Terms Of Service"
}

### https://www.playframework.com/documentation/2.5.x/SettingsNetty#Configuring-netty
play.server {

  # The server provider class name
  provider = "play.core.server.NettyServerProvider"

  netty {

    # The number of event loop threads. 0 means let Netty decide, which by default will select 2 times the number of
    # available processors.
    eventLoopThreads = 0

    # The maximum length of the initial line. This effectively restricts the maximum length of a URL that the server will
    # accept, the initial line consists of the method (3-7 characters), the URL, and the HTTP version (8 characters),
    # including typical whitespace, the maximum URL length will be this number - 18.
    maxInitialLineLength = 4096

    # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
    # number of cookies and size of cookie values.
    maxHeaderSize = 8192

    # The maximum length of body bytes that Netty will read into memory at a time.
    # This is used in many ways.  Note that this setting has no relation to HTTP chunked transfer encoding - Netty will
    # read "chunks", that is, byte buffers worth of content at a time and pass it to Play, regardless of whether the body
    # is using HTTP chunked transfer encoding.  A single HTTP chunk could span multiple Netty chunks if it exceeds this.
    # A body that is not HTTP chunked will span multiple Netty chunks if it exceeds this or if no content length is
    # specified. This only controls the maximum length of the Netty chunk byte buffers.
    maxChunkSize = 8192

    # Whether the Netty wire should be logged
    log.wire = false

    # The transport to use, either jdk or native.
    # Native socket transport has higher performance and produces less garbage but are only available on linux
    transport = "jdk"

    # Netty options. Possible keys here are defined by:
    #
    # http://netty.io/4.0/api/io/netty/channel/ChannelOption.html
    #
    # Options that pertain to the listening server socket are defined at the top level, options for the sockets associated
    # with received client connections are prefixed with child.*
    option {

      # Set the size of the backlog of TCP connections.  The default and exact meaning of this parameter is JDK specific.
      # SO_BACKLOG = 100

      child {
        # Set whether connections should use TCP keep alive
        # SO_KEEPALIVE = false

        # Set whether the TCP no delay flag is set
        # TCP_NODELAY = false
      }

    }

  }
}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.


### https://www.playframework.com/documentation/2.5.x/ThreadPools
akka {
  actor {
    default-dispatcher {
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8
        # Settings this to 1 instead of 3 seems to improve performance.
        parallelism-factor = 3.0

        # @richdougherty: Not sure why this is set below the Akka
        # default.
        parallelism-max = 64

        # Setting this to LIFO ch
        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }
  }
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

noqueue-context {
  fork-join-executor {

    parallelism-factor = 20.0

    parallelism-max = 200
  }
}

## More documentation about Tunning Play Server Side can be found here:
## http://doc.akka.io/docs/akka/2.4.5/general/configuration.html#Listing_of_the_Reference_Configuration

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#  sbt playGenerateSecret
play.crypto.secret = "31N]C^vY]l3]hP7z>Su4J_9kKbU1wwshBye0mN81S/;yDfyp;pRiGT^vv=e^sDC/"
play.crypto.secret = ${?APPLICATION_SECRET}

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = DEBUG

ws.acceptAnyCertificate = true

###
#ws.ssl {
#  trustManager = {
#    stores = [
#      { path: ${store.directory}/exampletrust.jks }     # Added trust store
#      { path: ${java.home}/lib/security/cacerts } # Fallback to default JSSE trust store
#    ]
#  }
#}

# Logger provided to your application:
logger.application=DEBUG


#Threads pools

# http://www.widecodes.com/CSVVVjVUjg/play-war-deployment-prevents-tomcat-to-stop.html

akka {
  daemonic = on
}

play.akka.daemonic = on

# application.mode=prod

# https://www.playframework.com/documentation/2.4.x/ThreadPools
# http://liviutudor.com/2014/01/15/about-the-play-framework-and-their-thread-pooling/
# http://stackoverflow.com/questions/24591905/play-framework-2-x-and-blocking-database-call

# application.baseUrl=http://localhost:9000/

# %production%.application.baseUrl=http://www.yourdomain.com/

# Default database configuration using PostgreSQL database engine

// This for the remote server
#db.default.driver = "com.mysql.jdbc.Driver"
#db.default.url = "jdbc:mysql://192.254.162.50/hewiyoat_no_waiting"
#db.default.user = "hewiyoat_no_app"
#db.default.password = "Kkconqueso1."
#### jdbc:postgresql://localhost/my-db?user=postgres&password=postgres
##slick.dbs.default.driver= "slick.driver.MySQLDriver$"
##slick.dbs.default.db.driver="com.mysql.jdbc.Driver"
##slick.dbs.default.db.url = "jdbc:mysql://192.254.162.50/hewiyoat_no_waiting"
##slick.dbs.default.db.user = "hewiyoat_no_app"
##slick.dbs.default.db.password = "Kkconqueso1."
//db.default.driver= "slick.jdbc.PostgresProfile$"
//db.default.driver="org.postgresql.Driver"
//db.default.url = "jdbc:postgresql://localhost:5432/documents?currentSchema=no_waiting"
//db.default.user = "no_app"
//db.default.password = "no_app"

slick.dbs.default.profile = "slick.jdbc.MySQLProfile$"
slick.dbs.default.db.driver = "com.mysql.jdbc.Driver"
slick.dbs.default.db.url = "jdbc:mysql://localhost:3306/talachitas_sms"
slick.dbs.default.db.user = "ATG2VZZyrlIp4nBaIlZJTfr3cstRZhqB/tJMLETwhbKxj7cEogU836IdkZ0k4MsC6MiKMw=="
slick.dbs.default.db.password= "ATG2VZa0n+5mQmsF6xPtWW6HjvVdgV6oEDGJdO74sY4cFG1SzSMp6SKN9iBq"

talachitas.directory.cert.local="/Users/morichio/"
talachitas.directory.cert.prod="/home/bitnami/cert/"

talachitas.home.conf.local="/Users/mauriciodanielgomez_torres/code/no-waiting-backend/src/main/resources/"
talachitas.home.conf.prod="/home/bitnami/no-waiting-backend-0.0.1-SNAPSHOT/conf/"

//talachitas.env=local
talachitas.env=prod

## https://www.playframework.com/documentation/2.5.x/ThreadPools#understanding-play-thread-pools

my-context {
  fork-join-executor {
    parallelism-factor = 20.0
    parallelism-max = 200
  }
}


# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}


## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""

  //enabled += "play.modules.swagger.SwaggerModule"
  enabled += "play.filters.csrf.CSRFModule"
  enabled += "play.filters.cors.CORSModule"
  enabled += "play.filters.headers.SecurityHeadersModule"
  enabled += "play.filters.hosts.AllowedHostsModule"
  enabled += "play.filters.gzip.GzipFilterModule"
  enabled += "com.kenshoo.play.metrics.PlayModule"
}


play.filters {

  # CSRF config
  csrf {

    # Token configuration
    token {
      # The token name
      name = "csrfToken"

      # Whether tokens should be signed or not
      sign = true
    }

    # Cookie configuration
    cookie {
      # If non null, the CSRF token will be placed in a cookie with this name
      name = null

      # Whether the cookie should be set to secure
      secure = true //${play.http.session.secure}

      # Whether the cookie should have the HTTP only flag set
      httpOnly = false
    }

    # How much of the body should be buffered when looking for the token in the request body
    body.bufferSize = ${play.http.parser.maxMemoryBuffer}

    # Bypass the CSRF check if this origin is trusted by the CORS filter
    bypassCorsTrustedOrigins = true

    # Header configuration
    header {

      # The name of the header to accept CSRF tokens from.
      name = "Csrf-Token"


      # Defines headers that must be present to perform the CSRF check. If any of these headers are present, the CSRF
      # check will be performed.
      #
      # By default, we only perform the CSRF check if there are Cookies or an Authorization header.
      # Generally, CSRF attacks use a user's browser to execute requests on the client's behalf. If the user does not
      # have an active session, there is no danger of this happening.
      #
      # Setting this to null or an empty object will protect all requests.
      protectHeaders {
        Cookie = "*"
        Authorization = "*"
      }

      # Defines headers that can be used to bypass the CSRF check if any are present. A value of "*" simply
      # checks for the presence of the header. A string value checks for a match on that string.
      bypassHeaders {}
    }

    # Method lists
    method {
      # If non empty, then requests will be checked if the method is not in this list.
      whiteList = ["GET", "HEAD", "OPTIONS"]

      # The black list is only used if the white list is empty.
      # Only check methods in this list.
      blackList = []
    }

    # Content type lists
    # If both white lists and black lists are empty, then all content types are checked.
    contentType {
      # If non empty, then requests will be checked if the content type is not in this list.
      whiteList = []

      # The black list is only used if the white list is empty.
      # Only check content types in this list.
      blackList = []
    }

    # The error handler.
    # Used by Play's built in DI support to locate and bind a request handler.  Must be one of the following:
    # - A FQCN that implements play.filters.csrf.CSRF.ErrorHandler (Scala).
    # - A FQCN that implements play.filters.csrf.CSRFErrorHandler (Java).
    # - provided, indicates that the application has bound an instance of play.filters.csrf.CSRF.ErrorHandler through some
    #   other mechanism.
    # If null, will attempt to load a class called CSRFErrorHandler in the root package, otherwise if that's
    # not found, will default to play.filters.csrf.CSRF.CSRFHttpErrorHandler, which delegates to the configured
    # HttpRequestHandler.
    errorHandler = null
  }

  # Security headers filter configuration
  headers {

    # The X-Frame-Options header. If null, the header is not set.
    frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    contentSecurityPolicy = "default-src 'self'"
  }

  # Allowed hosts filter configuration
  hosts {

    # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
    # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
    # "." matches all domains, and "" matches an empty or nonexistent host.
    allowed = ["localhost", ".local"]
  }

  # CORS filter configuration
  cors {

    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 10 hours
  }

  # GZip filter configuration
  gzip {

    # The buffer size to use for gzipped bytes
    bufferSize = 8k

    # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
    # to chunked encoding.
    chunkedThreshold = 100k

  }
}


## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor=http://localhost:63342/api/file/?file=%s&line=%s

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = ["en", "sp", "fr"]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  filters = filters.Filters

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = false

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    maxAge = 10 hours

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = false
  }
}


## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#

play.http.parser.maxMemoryBuffer = 100M

parsers.anyContent.maxLength = 100MB

play.cache.expiration.mili = 2000000


# Standard KafkaConsumer properties:

# bootstrap.servers = "localhost:9092",
# group.id = "group"
# enable.auto.commit = false
# auto.offset.reset = "earliest"

# KafkaConsumerActor config
# schedule.interval = 1 second
# unconfirmed.timeout = 3 seconds


# kafka {
#   bootstrap.servers = "kafka:9092"
#   topics = ["samples"]
#   group.id = "metering"
#   auto.offset.reset = "earliest"
#}

# Auth0 Information
# ~~~~~~~~~~~~~~~~~


auth {
  ## Private key
  s = "ATG2VZYskLtoU9D/47ZSnbZf8WtcQrKt6yW32sML+kJA0Di8+Ky3BQLlAg8MHx48OvXaR+RbEhrbzNJuFIJbybPxnLlIMJGXku//T6pKFFG8m7fh0K6DCQOxjsDDShYpheKU0RT2mUl9LR35yEzXXaTAbvC3e7wguuGRPQytfKYZ2/bbDQVpIoGRWerwXbtkJCMYdsVjtNYjmO3BMU06Epg3Xos="
  ## public keys
  x = "ATG2VZZq0is3hm/XlODT4k+NFdr2zVjITEwimiUcmAhO12PV5viUQAa7UM+x221LC29RHSOObw0LcrwsBSo9TVSDETbg3d0ci46xAZ8jvqnvPwaPek1K+9SwwLVFSJ3aD1OBjHH+o8gtZwDEf3SKHdghuTZxbbV5LP2W6lABJdRs2x+rjcyY0e/exSHiIO/ZlmN52L4r++Xsz/gtYcX940+s9eg="
  y = "ATG2VZbiUhbNF35cZdD5skJ6o5MTM17WoOx7eymp0ZnyTCzseLQaN5oKZmexjF/K49xweaQ4/Jz67wr+Se9F37Gnx3XttS8CuoTjWOAZb0mTxhRmIbecrznDxfxqbSpJKUgzFmcVp2ns6tViUVl8sBTzuOpf2j2fJPlgDkXYB72cGA3MhnV+3aBEViSXQ9QMsWBDA2Tp+NE14FvcOavKPyc0Ww=="
  expiration = 86400 //seconds
}
